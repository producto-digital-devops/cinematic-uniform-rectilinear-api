trigger:
- none

variables:
  pipelineCI: $(pipelineCI)
  TerraformDirectory: $(terraformDirectory)
  azConnection: $(azConnection)
  azFunctionName: $(azFunctionName)
  azStResourceGroup: $(azStResourceGroup)
  azStAccount: $(azStAccount)
  AzStContainer: $(azStContainer)  

resources:
  pipelines: 
  - pipeline: $(pipelineCI)
    source: 'pipeline_$(pipelineCI)'
stages:
- stage: Deploy
  jobs:
  - deployment: Deployment
    displayName: 'Agent Job'
    pool:
      vmImage: ubuntu-latest
    environment: $(pipelineCI)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform latest'
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform : init'
            inputs:
              workingDirectory: $(terraformDirectory)
              backendServiceArm: $(azConnection)
              backendAzureRmResourceGroupName: $(azStResourceGroup)
              backendAzureRmStorageAccountName: $(azStAccount)
              backendAzureRmContainerName: $(AzStContainer)
              backendAzureRmKey: terraform.tfstate
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform : validate'
            inputs:
              command: validate
              workingDirectory: $(terraformDirectory)
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform : plan'
            inputs:
              command: plan
              workingDirectory: $(terraformDirectory)
              environmentServiceNameAzureRM: $(azConnection)
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform : apply'
            inputs:
              command: apply
              workingDirectory: $(terraformDirectory)
              environmentServiceNameAzureRM: $(azConnection)
          - task: AzureFunctionApp@1
            displayName: 'Azure Function App Deploy'
            inputs:
              azureSubscription: $(azConnection)
              appType: functionAppLinux
              appName: $(azFunctionName)