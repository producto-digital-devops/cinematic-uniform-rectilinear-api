trigger:
- none

variables:
  pipelineCI: 'cinematic-urm-dev-CI'
  terraformDirectory: '$(System.ArtifactsDirectory)/drop/terraform'
  azConnection: 'azure-subscription'
  azFunctionName: 'func-eastus2-dev-cinematic-urm'
  azStResourceGroup: 'rg-eastus2-monitoring'
  azStAccount: 'steastus2functions'
  AzStContainer: 'terraform'  

#resources:
#  pipelines: 
#  - pipeline: '_cinematic-urm-dev-CI'
#    source: 'pipeline_cinematic-urm-dev-CI'
stages:
- stage: Deploy
  jobs:
  - deployment: Deployment
    displayName: 'Agent Job'
    pool:
      vmImage: ubuntu-latest
    environment: 'cinematic-urm-dev-CI'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: 'cinematic-urm-dev-CI'
            artifact: drop
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(System.DefaultWorkingDirectory)/_cinematic-urm-dev-CI/drop/terraform'
              destinationFolder: '$(System.ArtifactsDirectory)'
          #- task: DownloadBuildArtifacts@1
          #  inputs:
          #    buildType: 'specific'              
          #    pipeline: 'cinematic-urm-dev-CI'
          #    buildVersionToDownload: 'latest'
          #    downloadType: 'specific'
          #    downloadPath: '$(System.ArtifactsDirectory)'
          - task: TerraformInstaller@0
            displayName: 'Install Terraform latest'
          - task: TerraformTaskV2@2
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: init
              workingDirectory: $(terraformDirectory)
              backendServiceArm: $(azConnection)
              backendAzureRmResourceGroupName: $(azStResourceGroup)
              backendAzureRmStorageAccountName: $(azStAccount)
              backendAzureRmContainerName: $(AzStContainer)
              backendAzureRmKey: terraform.tfstate
          - task: TerraformTaskV2@2
            displayName: 'Terraform validate'
            inputs:
              provider: 'azurerm'
              command: validate
              workingDirectory: $(terraformDirectory)
          - task: TerraformTaskV2@2
            displayName: 'Terraform plan'
            inputs:
              provider: 'azurerm'
              command: plan
              workingDirectory: $(terraformDirectory)
              environmentServiceNameAzureRM: $(azConnection)
          - task: TerraformTaskV2@2
            displayName: 'Terraform apply'
            inputs:
              provider: 'azurerm'
              command: apply
              workingDirectory: $(terraformDirectory)
              environmentServiceNameAzureRM: $(azConnection)
          - task: AzureFunctionApp@1
            displayName: 'Azure Function App Deploy'
            inputs:
              azureSubscription: $(azConnection)
              appType: functionAppLinux
              appName: $(azFunctionName)